
const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE')
console.log('=====================================\n')

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:')
console.log(`   URL: ${supabaseUrl ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`)
console.log(`   KEY: ${supabaseAnonKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`)
console.log(`   URL –∑–Ω–∞—á–µ–Ω–∏–µ: ${supabaseUrl || '–ù–ï –ù–ê–ô–î–ï–ù'}`)
console.log(`   KEY –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${supabaseAnonKey ? supabaseAnonKey.substring(0, 20) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù'}\n`)

if (!supabaseUrl || !supabaseAnonKey) {
  console.log('‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
  process.exit(1)
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
const isDemoMode = supabaseUrl === 'https://demo.supabase.co' || supabaseAnonKey === 'demo_key'
console.log('2. –°–¢–ê–¢–£–° –î–ï–ú–û-–†–ï–ñ–ò–ú–ê:')
console.log(`   –î–µ–º–æ-—Ä–µ–∂–∏–º: ${isDemoMode ? '‚ùå –í–∫–ª—é—á–µ–Ω' : '‚úÖ –û—Ç–∫–ª—é—á–µ–Ω'}\n`)

// 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
console.log('3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:')
const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function testConnection() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('   üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...')
    const { data: healthData, error: healthError } = await supabase
      .from('trips')
      .select('count', { count: 'exact', head: true })
    
    if (healthError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${healthError.message}`)
      return false
    }
    
    console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    console.log('\n4. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶:')
    const tables = ['trips', 'participants', 'expenses', 'expense_shares', 'transfers']
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true })
        
        if (error) {
          console.log(`   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`)
        } else {
          console.log(`   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: –Ω–∞–π–¥–µ–Ω–∞`)
        }
      } catch (err) {
        console.log(`   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n5. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•:')
    try {
      const { data: trips, error: tripsError } = await supabase
        .from('trips')
        .select('*')
        .limit(5)
      
      if (tripsError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫: ${tripsError.message}`)
      } else {
        console.log(`   ‚úÖ –ü–æ–µ–∑–¥–∫–∏: –Ω–∞–π–¥–µ–Ω–æ ${trips?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
        if (trips && trips.length > 0) {
          console.log(`   üìã –ü—Ä–∏–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏: "${trips[0].name}"`)
        }
      }
    } catch (err) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${err.message}`)
    }
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    console.log('\n6. –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô:')
    try {
      console.log('   üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏...')
      const testTrip = {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ - ' + new Date().toISOString(),
        location: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ',
        startDate: '2024-12-15',
        endDate: '2024-12-16',
        isArchived: false
      }
      
      const { data: created, error: createError } = await supabase
        .from('trips')
        .insert([testTrip])
        .select()
      
      if (createError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createError.message}`)
      } else {
        console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: —É—Å–ø–µ—à–Ω–æ')
        
        // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
        if (created && created[0]) {
          console.log('   üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏...')
          const { error: deleteError } = await supabase
            .from('trips')
            .delete()
            .eq('id', created[0].id)
          
          if (deleteError) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${deleteError.message}`)
          } else {
            console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: —É—Å–ø–µ—à–Ω–æ')
          }
        }
      }
    } catch (err) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: ${err.message}`)
    }
    
    // –¢–µ—Å—Ç Real-time
    console.log('\n7. –¢–ï–°–¢ REAL-TIME:')
    try {
      console.log('   üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Real-time –ø–æ–¥–ø–∏—Å–∫–∏...')
      const channel = supabase
        .channel('test-channel')
        .on('postgres_changes', {
          event: '*',
          schema: 'public',
          table: 'trips'
        }, (payload) => {
          console.log('   ‚úÖ Real-time —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', payload.eventType)
        })
        .subscribe()
      
      setTimeout(() => {
        channel.unsubscribe()
        console.log('   ‚úÖ Real-time –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      }, 1000)
      
    } catch (err) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ Real-time: ${err.message}`)
    }
    
    return true
    
  } catch (err) {
    console.log(`   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${err.message}`)
    return false
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testConnection().then(success => {
  console.log('\n=====================================')
  if (success) {
    console.log('üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
  } else {
    console.log('üí• –†–ï–ó–£–õ–¨–¢–ê–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º!')
  }
  console.log('=====================================')
  process.exit(success ? 0 : 1)
}).catch(err => {
  console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', err.message)
  process.exit(1)
})
